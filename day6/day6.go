package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
)

// readInput reads the file at path and returns the fish therein
func readInput(path string) ([]int, error) {
	content, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	return parseInput(string(content))
}

// parseInput parses the input string and returns the fish therein
func parseInput(input string) ([]int, error) {
	var (
		fish []int
	)

	lines := strings.Split(strings.TrimSpace(input), "\n")

	for _, line := range lines {
		nums := strings.Split(strings.TrimSpace(line), ",")

		for _, n := range nums {
			i, err := strconv.Atoi(n)
			if err != nil {
				return nil, err
			}
			fish = append(fish, i)
		}
	}

	return fish, nil
}

// simulateFish simulates the growth of our school and returns the total number
// of fish alive after the given number of days
func simulateFish(fish []int, days int) int {
	var newFish []int
	for i := 0; i < days; i++ {
		newFish = append(newFish, 0)
	}

	// project new fish generated by fish currently alive
	for _, f := range fish {
		newFish[f]++
		// more offspring every 7 days, forever
		n := f + 7
		for n < len(newFish) {
			newFish[n]++
			n += 7
		}
	}

	// step through each day, and project new fish generated by fish born on that day
	for i := 0; i < len(newFish); i++ {
		// first offspring after 9 days
		n := i + 9
		for n < len(newFish) {
			newFish[n] += newFish[i]
			// more offspring every 7 days, forever
			n += 7
		}
	}

	// return sum of all fish born on each day + original fish
	total := 0
	for _, count := range newFish {
		total += count
	}
	return total + len(fish)
}

func part1(fish []int) int {
	return simulateFish(fish, 80)
}

func part2(fish []int) int {
	return simulateFish(fish, 256)
}

func main() {
	_, path, _, _ := runtime.Caller(0)
	path = filepath.Join(filepath.Dir(path), "input.txt")

	fish, err := readInput(path)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Part 1: %d\n", part1(fish))
	fmt.Printf("Part 2: %d\n", part2(fish))
}
